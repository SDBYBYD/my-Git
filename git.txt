github
    网站，社交平台，开源项目，远程仓库
    官网：https://github.com/
windows
    可视化
    命令行（推荐）
设置：
    配置用户名和密码：
        git config --global user.name '你自己的用户名'
        git config --global user.email	 '你自己的邮箱'

通过key关联本地库和远程库：
    github	请自行注册账号
    由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
        创建SSH Key。在用户主目录下（C:\Users\wyunfei），看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：$ ssh-keygen -t rsa -C "你的邮箱地址"
        登陆GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
        当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
        最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。
        如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。
    1，在GitHub上创建一个新仓库；
    2，把本地仓库与GitHub进行关联:git remote add origin git@github.com:xiaosi0707/09A.git	
        注意：把git@github.com:xiaosi0707/09A.git改成你自己的
    3，把本地仓库内容推送到GitHub：git push -u origin master
        注意：首次推动到远程库需要添加-u，以后就不必了
    备注：当你第一次使用git的clone或push命令连接GitHub时,会得到一个警告，这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
            取消本地库和远程库的关联：git remote remove origin
            查看远程库详细信息： git remote -v（如果没有推送权限就看不到push地址）
把本地库文件推送到远程仓库（github）：
创建一个目录，进入到目录中执行git init，之后可以看到.git文件（不显示的请自行设置电脑“显示隐藏目录”）说明成功；这里面所有的文件都可以被git管理起来，每个文件的修改都可以被追踪；
注意：请确保目录名为英文，包括父级目录；.git文件是用来跟踪管理版本库的，不要手动修改删除；
    建立一个文件放到仓库中，例如readme.txt
    git status		查看当前工作区已确定要提交哪些文件 状态（红色：在工作区；绿色：暂存区）
    1，git add 文件名称/.		“.”代表全部
    2，git commit -m -a '本次修改注释'	提交到版本库（推荐）或使用 git commit -a -m '本次修改注释'	省略掉add命令，直接提交到版本库
    3,git push -u origin master			推送到远程仓库
    备注：输入密码的时候是“盲输”即可，小黑窗不会显示你输入的内容
GitHub地址类型：
    GitHub给出的地址不止一个，还可以用git@github.com:xiaosi0707/09A.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
    使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。